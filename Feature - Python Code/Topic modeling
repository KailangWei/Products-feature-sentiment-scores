{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import nltk\n",
    "from nltk.corpus import stopwords \n",
    "from nltk.stem.wordnet import WordNetLemmatizer\n",
    "import string\n",
    "import gensim\n",
    "from gensim import corpora, models\n",
    "import pandas as pd\n",
    "from nltk import FreqDist\n",
    "import re\n",
    "import spacy\n",
    "import numpy as np\n",
    "# libraries for visualization\n",
    "import pyLDAvis\n",
    "import pyLDAvis.gensim\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\banva\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nltk.download('stopwords')\n",
    " # one time run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!python -m spacy download en\n",
    "import en_core_web_sm\n",
    "nlp = en_core_web_sm.load()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "reviews = [\"I love it. I was looking for a small Dewalt Li. Charger. This one is good for tight spaces or over the wall, and its very efficient charging the batteries.The battery included was a little bit larger than the ones i already have so i had to remove the metal hanger from the drill in order to use the new batte So far no problems, preform as expected. good deal to save your 18 volt tools worked well and easy Works great except with my finish nail gun. Easy to use and a great way to extend the life of the older generation tools. The 20v conversion kit is a great price and value. The new smaller battery is lighter and not as bulky as the 18v batteries. I am so happy that I changed over. The vault see only time I buy the best Worth the cost nice to have a conversion from the old batteries and reuse the original tools. Very pricy, they are making a ton of money on these batteries. I love my speaker so much awesome bass system it\\'s exactly what I want Although I have an older corded circular saw, when we began our house remodeling I decided that I wanted to get a cordless saw to use for making quick cuts, be it boards, panels, or trim. I liked the idea of having the saw available whenever or wherever I needed it, without having to worry about stringing out the extension cord, especially for a quick cut or two. Already having several batteries and being a fan of DeWalt, I took a look at their offerings and purchased the DCS391B 20V MAX 6-1/2&quot; Saw. I have been using the saw now for 6 months and I have been extremely pleased with its performance. The saw is lightweight, which I have found makes it much easier to control, especially for long cuts on plywood panels. Although the saw is quiet, it has plenty of power to handle whatever cuts I\\'ve needed, from trim pieces to framing lumber and even trimming off the bottoms of wood doors with ease. The shape of the grip handle with its rubber covering is comfortable, while the power trigger safety and trigger switch are both easy to operate. The depth of blade and bevel adj\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "df= pd.DataFrame(reviews,columns=['reviews'] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    I bought the tool without a battery. Who can i...\n",
       "1    This product is really good, but the handle ne...\n",
       "Name: reviews, dtype: object"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['reviews']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to plot most frequent terms\n",
    "def freq_words(x, terms = 30):\n",
    "    all_words = ' '.join([text for text in x])\n",
    "    all_words = all_words.split()\n",
    "\n",
    "    fdist = FreqDist(all_words)\n",
    "    words_df = pd.DataFrame({'word':list(fdist.keys()), 'count':list(fdist.values())})\n",
    "\n",
    "    # selecting top 20 most frequent words\n",
    "    d = words_df.nlargest(columns=\"count\", n = terms) \n",
    "    plt.figure(figsize=(20,5))\n",
    "    ax = sns.barplot(data=d, x= \"word\", y = \"count\")\n",
    "    ax.set(ylabel = 'Count')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "stop_words = stopwords.words('english')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to remove stopwords\n",
    "def remove_stopwords(rev):\n",
    "    rev_new = \" \".join([i for i in rev if i not in stop_words])\n",
    "    return rev_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove short words (length < 3)\n",
    "df['reviews'] = df['reviews'].apply(lambda x: ' '.join([w for w in x.split() if len(w)>2]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    bought the tool without battery. Who can ignor...\n",
       "1    This product really good, but the handle needs...\n",
       "Name: reviews, dtype: object"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['reviews']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# remove stopwords from the text\n",
    "exp = [remove_stopwords(r.split()) for r in df['reviews']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['bought tool without battery. Who ignore $20 rebate, got great deal. Three thoughts however, leaning way. And take consideration buy bare tool.1) Get new 6.3 Core battery ordered two). Had thought need one, might ordered bare tool. might looked package--tool, battery, tool bag, etcetera. The 18v slimline battery packs already simply weak work satisfactorily. Did they? Yes, blade moved much slower pace might powerful battery. Online reviews 18v Core batteries--in configuration--argue entire Bosch 18v line tools work much better new improved cells. Additionally, might imagine, slimline batteries allow satisfactory number cuts seizing middle my, know, maybe 12th 2x4.2) Count buying better blade one included. The 6.5 inch circular saw blade included might throw-away anything crudest cuts. And want different blades anyway, cutting plywood dimensional lumber.3) like think lighter battery-operated circular saw would take Bosch batteries. But pretty wedded brand, save couple Dewalt saws. love brake one, fine. But mind little lighter',\n",
       " 'This product really good, handle needs improvement']"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1440x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "freq_words(exp,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['This', 'product', 'really', 'good,', 'handle', 'needs', 'improvement']\n",
      "['product', 'handle', 'need', 'improvement']\n"
     ]
    }
   ],
   "source": [
    "# lemmatization\n",
    "\n",
    "import en_core_web_sm\n",
    "nlp = en_core_web_sm.load(disable=['parser', 'ner'])\n",
    "\n",
    "\n",
    "def lemmatization(texts, tags=[ 'NOUN','ADJECTIVE','VERB']): # use verbs, adjectives and nouns \n",
    "    output = []\n",
    "    for sent in texts:\n",
    "        doc = nlp(\" \".join(sent)) \n",
    "        output.append([token.lemma_ for token in doc if token.pos_ in tags])\n",
    "    return output\n",
    "\n",
    "tokenized_reviews = pd.Series(exp).apply(lambda x: x.split())\n",
    "print(tokenized_reviews[1])\n",
    "\n",
    "# delete most common words, such as relating the to product's name\n",
    "#def delete_product_name(token_list):\n",
    " #   return [x for x in token_list if x not in ['kindle','fire','amazon', 'device', 'tablet', 'book', 'thing']]\n",
    "#tokenized_reviews = tokenized_reviews.apply(delete_product_name)\n",
    "\n",
    "reviews_2 = lemmatization(tokenized_reviews)\n",
    "print(reviews_2[1]) # print lemmatized review"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['product', 'handle', 'need', 'improvement']"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[x for x in reviews_2[1] if x not in stop_words]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1440x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# replace review column with the cleaned version\n",
    "reviews_3 = []\n",
    "for i in range(len(reviews_2)):\n",
    "    reviews_3.append(' '.join(reviews_2[i]))\n",
    "\n",
    "df['reviews'] = reviews_3\n",
    "\n",
    "# Visualize\n",
    "freq_words(df['reviews'], 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Modelling"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### LDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from gensim.models.coherencemodel import CoherenceModel\n",
    "dictionary = corpora.Dictionary(reviews_2)\n",
    "doc_term_matrix = [dictionary.doc2bow(rev) for rev in reviews_2]\n",
    "# Creating the object for LDA model using gensim library\n",
    "LDA = gensim.models.ldamodel.LdaModel\n",
    "\n",
    "# check coherence score to decide number of topics \n",
    "c_v_score = []\n",
    "for i in range(2,11):\n",
    "    lda_model = LDA(corpus = doc_term_matrix, id2word = dictionary, num_topics = i, random_state = 44,\n",
    "                chunksize = 1000, passes = 50)\n",
    "    c_v_score.append(CoherenceModel(model=lda_model, texts=reviews_2, dictionary=dictionary, coherence='c_v').get_coherence())\n",
    "\n",
    "# plot the score\n",
    "# plot the coherence score\n",
    "x = range(2, 11)\n",
    "plt.plot(x, c_v_score)\n",
    "plt.xlabel(\"Number of Topics\")\n",
    "plt.ylabel(\"Coherence score\")\n",
    "plt.legend((\"coherence_values\"), loc='best')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# train the model on optimal number of topics \n",
    "lda_model = LDA(corpus = doc_term_matrix, id2word = dictionary, num_topics = c_v_score.index(max(c_v_score))+1, random_state = 44,\n",
    "                chunksize = 1000, passes = 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0,\n",
       "  '0.016*\"improvement\" + 0.016*\"handle\" + 0.016*\"need\" + 0.016*\"product\" + 0.016*\"pace\" + 0.016*\"operate\" + 0.016*\"plywood\" + 0.016*\"package\" + 0.016*\"pack\" + 0.016*\"review\"'),\n",
       " (1,\n",
       "  '0.016*\"improvement\" + 0.016*\"handle\" + 0.016*\"need\" + 0.016*\"product\" + 0.016*\"pace\" + 0.016*\"operate\" + 0.016*\"plywood\" + 0.016*\"package\" + 0.016*\"pack\" + 0.016*\"review\"'),\n",
       " (2,\n",
       "  '0.103*\"need\" + 0.103*\"improvement\" + 0.103*\"handle\" + 0.103*\"product\" + 0.010*\"pace\" + 0.010*\"operate\" + 0.010*\"plywood\" + 0.010*\"package\" + 0.010*\"pack\" + 0.010*\"review\"'),\n",
       " (3,\n",
       "  '0.016*\"improvement\" + 0.016*\"handle\" + 0.016*\"need\" + 0.016*\"product\" + 0.016*\"pace\" + 0.016*\"operate\" + 0.016*\"plywood\" + 0.016*\"package\" + 0.016*\"pack\" + 0.016*\"review\"'),\n",
       " (4,\n",
       "  '0.016*\"battery\" + 0.016*\"tool\" + 0.016*\"blade\" + 0.016*\"saw\" + 0.016*\"cut\" + 0.016*\"18v\" + 0.016*\"slimline\" + 0.016*\"take\" + 0.016*\"think\" + 0.016*\"include\"'),\n",
       " (5,\n",
       "  '0.099*\"battery\" + 0.056*\"tool\" + 0.045*\"blade\" + 0.034*\"buy\" + 0.034*\"cut\" + 0.023*\"circular\" + 0.023*\"include\" + 0.023*\"work\" + 0.023*\"take\" + 0.023*\"18v\"'),\n",
       " (6,\n",
       "  '0.016*\"improvement\" + 0.016*\"handle\" + 0.016*\"need\" + 0.016*\"product\" + 0.016*\"pace\" + 0.016*\"operate\" + 0.016*\"plywood\" + 0.016*\"package\" + 0.016*\"pack\" + 0.016*\"review\"'),\n",
       " (7,\n",
       "  '0.016*\"battery\" + 0.016*\"tool\" + 0.016*\"buy\" + 0.016*\"blade\" + 0.016*\"cut\" + 0.016*\"take\" + 0.016*\"slimline\" + 0.016*\"saw\" + 0.016*\"think\" + 0.016*\"work\"'),\n",
       " (8,\n",
       "  '0.016*\"improvement\" + 0.016*\"handle\" + 0.016*\"need\" + 0.016*\"product\" + 0.016*\"pace\" + 0.016*\"operate\" + 0.016*\"plywood\" + 0.016*\"package\" + 0.016*\"pack\" + 0.016*\"review\"')]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get the topics\n",
    "lda_model.print_topics()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\banva\\Anaconda3\\lib\\site-packages\\pyLDAvis\\_prepare.py:257: FutureWarning: Sorting because non-concatenation axis is not aligned. A future version\n",
      "of pandas will change to not sort by default.\n",
      "\n",
      "To accept the future behavior, pass 'sort=False'.\n",
      "\n",
      "To retain the current behavior and silence the warning, pass 'sort=True'.\n",
      "\n",
      "  return pd.concat([default_term_info] + list(topic_dfs))\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.css\">\n",
       "\n",
       "\n",
       "<div id=\"ldavis_el1609629083473007443210910021\"></div>\n",
       "<script type=\"text/javascript\">\n",
       "\n",
       "var ldavis_el1609629083473007443210910021_data = {\"mdsDat\": {\"x\": [-0.07627936262420205, 0.09663021952263595, -0.0029072430281951124, -0.0029071703463511827, -0.0029072430281951106, -0.0029074714111071262, -0.002907243028195114, -0.002907243028195114, -0.002907243028195116], \"y\": [-0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0], \"topics\": [1, 2, 3, 4, 5, 6, 7, 8, 9], \"cluster\": [1, 1, 1, 1, 1, 1, 1, 1, 1], \"Freq\": [94.61833953857422, 3.8187806606292725, 0.22326913475990295, 0.22326913475990295, 0.22326913475990295, 0.22326913475990295, 0.22326913475990295, 0.22326913475990295, 0.22326913475990295]}, \"tinfo\": {\"Category\": [\"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Default\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic1\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic2\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic3\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic4\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic5\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic6\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic7\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic8\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\", \"Topic9\"], \"Freq\": [8.0, 4.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 8.359932899475098, 4.689714431762695, 3.7721588611602783, 2.8546037673950195, 2.8546037673950195, 1.9370479583740234, 1.9370479583740234, 1.9370479583740234, 1.9370479583740234, 1.9370481967926025, 1.9370481967926025, 1.9370477199554443, 1.9370481967926025, 1.0194902420043945, 1.0194902420043945, 1.0194902420043945, 1.0194902420043945, 1.0194902420043945, 1.0194902420043945, 1.0194902420043945, 1.019490361213684, 1.019490361213684, 1.0194902420043945, 1.0194902420043945, 1.019490361213684, 1.019490361213684, 1.019490361213684, 1.019490361213684, 1.019490361213684, 1.019490361213684, 1.019490361213684, 1.019490361213684, 1.019490361213684, 1.019490361213684, 1.019490361213684, 1.019490361213684, 1.019490361213684, 1.019490361213684, 0.3503822982311249, 0.3503822982311249, 0.3503822982311249, 0.35038426518440247, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0350383035838604, 0.0032575333025306463, 0.0032575333025306463, 0.0032575333025306463, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257530741393566, 0.003257530741393566, 0.003257530741393566, 0.003257532836869359, 0.0032575333025306463, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.0032575326040387154, 0.003257532836869359, 0.003257532836869359, 0.0032575326040387154, 0.003257532836869359, 0.003257532836869359, 0.0032575326040387154, 0.0032575326040387154, 0.003257532836869359, 0.003257532138377428, 0.0032575326040387154, 0.0032575326040387154, 0.0032575326040387154, 0.0032575316727161407, 0.0032575326040387154, 0.0032575326040387154, 0.0032575326040387154, 0.0032575326040387154, 0.0032575326040387154, 0.0032575326040387154, 0.0032575326040387154, 0.0032575326040387154, 0.003257532138377428, 0.003257532138377428, 0.003257532138377428, 0.003257532138377428, 0.003257532138377428, 0.0032575316727161407, 0.0032575316727161407, 0.0032575316727161407, 0.0032575316727161407, 0.003257532138377428, 0.0032575316727161407, 0.0032575472723692656, 0.0032575377263128757, 0.0032575365621596575, 0.0032575351651757956, 0.0032575358636677265, 0.0032575351651757956, 0.00325753353536129, 0.003257532836869359, 0.0032575344666838646, 0.0032575340010225773, 0.0032575344666838646, 0.0032575344666838646, 0.0032575340010225773, 0.0032575333025306463, 0.0032575333025306463, 0.0032575333025306463, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.0032575190998613834, 0.0032575190998613834, 0.0032575190998613834, 0.00325753353536129, 0.0032575333025306463, 0.0032575333025306463, 0.003257532836869359, 0.0032575326040387154, 0.0032575316727161407, 0.00325753097422421, 0.00325753097422421, 0.00325753097422421, 0.003257530741393566, 0.003257530741393566, 0.003257530042901635, 0.003257530042901635, 0.003257530042901635, 0.003257529577240348, 0.003257529577240348, 0.003257529577240348, 0.003257528878748417, 0.003257528878748417, 0.003257528878748417, 0.003257528878748417, 0.003257528878748417, 0.003257528878748417, 0.003257528878748417, 0.003257528878748417, 0.003257528878748417, 0.0032575284130871296, 0.0032575284130871296, 0.0032575284130871296, 0.0032575284130871296, 0.0032575284130871296, 0.003257615491747856, 0.0032575621735304594, 0.003257559146732092, 0.003257547738030553, 0.0032575458753854036, 0.003257541684433818, 0.003257541451603174, 0.003257541451603174, 0.003257541451603174, 0.003257539588958025, 0.003257540287449956, 0.0032575391232967377, 0.0032575372606515884, 0.003257530042901635, 0.0032575333025306463, 0.0032575333025306463, 0.0032575333025306463, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.0032575333025306463, 0.0032575333025306463, 0.0032575333025306463, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.0032575333025306463, 0.0032575333025306463, 0.0032575333025306463, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359, 0.003257532836869359], \"Term\": [\"battery\", \"tool\", \"blade\", \"cut\", \"buy\", \"think\", \"take\", \"work\", \"include\", \"slimline\", \"saw\", \"18v\", \"circular\", \"need\", \"consideration\", \"package\", \"thought\", \"couple\", \"brand\", \"seize\", \"etcetera\", \"want\", \"pace\", \"know\", \"operate\", \"rebate\", \"way\", \"middle\", \"deal\", \"bag\", \"battery\", \"tool\", \"blade\", \"buy\", \"cut\", \"slimline\", \"take\", \"think\", \"18v\", \"include\", \"work\", \"saw\", \"circular\", \"pack\", \"get\", \"mind\", \"crudest\", \"count\", \"core\", \"ordered\", \"bag\", \"rebate\", \"review\", \"save\", \"cell\", \"inch\", \"argue\", \"consideration\", \"couple\", \"brand\", \"imagine\", \"ignore\", \"etcetera\", \"deal\", \"configuration\", \"lean\", \"brake\", \"allow\", \"product\", \"handle\", \"improvement\", \"need\", \"save\", \"get\", \"mind\", \"core\", \"count\", \"crudest\", \"ordered\", \"review\", \"pack\", \"line\", \"lean\", \"know\", \"inch\", \"imagine\", \"ignore\", \"allow\", \"etcetera\", \"argue\", \"look\", \"couple\", \"consideration\", \"configuration\", \"cell\", \"brand\", \"brake\", \"bag\", \"love\", \"deal\", \"middle\", \"move\", \"include\", \"cut\", \"circular\", \"buy\", \"blade\", \"battery\", \"product\", \"handle\", \"improvement\", \"save\", \"get\", \"mind\", \"core\", \"count\", \"crudest\", \"ordered\", \"review\", \"pack\", \"look\", \"line\", \"lean\", \"know\", \"inch\", \"imagine\", \"ignore\", \"allow\", \"etcetera\", \"argue\", \"love\", \"couple\", \"consideration\", \"configuration\", \"cell\", \"brand\", \"brake\", \"bag\", \"deal\", \"move\", \"middle\", \"see\", \"include\", \"cut\", \"circular\", \"buy\", \"blade\", \"battery\", \"product\", \"handle\", \"improvement\", \"review\", \"move\", \"count\", \"get\", \"operate\", \"save\", \"line\", \"love\", \"mind\", \"number\", \"one\", \"ordered\", \"pack\", \"cell\", \"core\", \"way\", \"ignore\", \"imagine\", \"crudest\", \"lean\", \"brake\", \"look\", \"throw\", \"see\", \"order\", \"argue\", \"plywood\", \"consideration\", \"inch\", \"brand\", \"seize\", \"thought\", \"know\", \"allow\", \"bag\", \"couple\", \"configuration\", \"etcetera\", \"battery\", \"tool\", \"buy\", \"cut\", \"blade\", \"take\", \"18v\", \"circular\", \"saw\", \"work\", \"think\", \"slimline\", \"include\", \"product\", \"handle\", \"improvement\", \"save\", \"get\", \"mind\", \"core\", \"count\", \"crudest\", \"ordered\", \"review\", \"pack\", \"look\", \"line\", \"lean\", \"know\", \"inch\", \"imagine\", \"ignore\", \"allow\", \"etcetera\", \"argue\", \"love\", \"couple\", \"consideration\", \"configuration\", \"cell\", \"brand\", \"brake\", \"bag\", \"deal\", \"move\", \"middle\", \"see\", \"include\", \"cut\", \"circular\", \"buy\", \"blade\", \"battery\", \"product\", \"handle\", \"improvement\", \"count\", \"save\", \"crudest\", \"core\", \"review\", \"mind\", \"get\", \"ordered\", \"pack\", \"allow\", \"look\", \"one\", \"package\", \"brake\", \"love\", \"plywood\", \"cell\", \"imagine\", \"ignore\", \"inch\", \"pace\", \"configuration\", \"couple\", \"argue\", \"move\", \"throw\", \"etcetera\", \"consideration\", \"want\", \"see\", \"number\", \"battery\", \"tool\", \"blade\", \"saw\", \"cut\", \"18v\", \"think\", \"take\", \"slimline\", \"work\", \"include\", \"buy\", \"circular\", \"need\", \"product\", \"handle\", \"improvement\", \"save\", \"get\", \"mind\", \"core\", \"count\", \"crudest\", \"ordered\", \"review\", \"pack\", \"look\", \"line\", \"lean\", \"know\", \"inch\", \"imagine\", \"ignore\", \"allow\", \"etcetera\", \"argue\", \"love\", \"couple\", \"consideration\", \"configuration\", \"cell\", \"brand\", \"brake\", \"bag\", \"deal\", \"move\", \"middle\", \"see\", \"include\", \"cut\", \"circular\", \"buy\", \"blade\", \"battery\", \"product\", \"handle\", \"improvement\", \"save\", \"get\", \"mind\", \"core\", \"count\", \"crudest\", \"ordered\", \"review\", \"pack\", \"look\", \"line\", \"lean\", \"know\", \"inch\", \"imagine\", \"ignore\", \"allow\", \"etcetera\", \"argue\", \"love\", \"couple\", \"consideration\", \"configuration\", \"cell\", \"brand\", \"brake\", \"bag\", \"deal\", \"move\", \"middle\", \"see\", \"include\", \"cut\", \"circular\", \"buy\", \"blade\", \"battery\", \"product\", \"handle\", \"improvement\", \"save\", \"get\", \"mind\", \"core\", \"count\", \"crudest\", \"ordered\", \"review\", \"pack\", \"look\", \"line\", \"lean\", \"know\", \"inch\", \"imagine\", \"ignore\", \"allow\", \"etcetera\", \"argue\", \"love\", \"couple\", \"consideration\", \"configuration\", \"cell\", \"brand\", \"brake\", \"bag\", \"deal\", \"move\", \"middle\", \"see\", \"include\", \"cut\", \"circular\", \"buy\", \"blade\", \"battery\"], \"Total\": [8.0, 4.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 8.41777515411377, 4.747557163238525, 3.8299996852874756, 2.912444591522217, 2.912444591522217, 1.9948889017105103, 1.9948889017105103, 1.9948889017105103, 1.9948889017105103, 1.9948891401290894, 1.9948891401290894, 1.9948886632919312, 1.9948891401290894, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.077331304550171, 1.077331304550171, 1.0773311853408813, 1.0773311853408813, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 0.4751356542110443, 0.4751356542110443, 0.4751356542110443, 1.3926714658737183, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.9948891401290894, 2.912444591522217, 1.9948891401290894, 2.912444591522217, 3.8299996852874756, 8.41777515411377, 0.4751356542110443, 0.4751356542110443, 0.4751356542110443, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.9948891401290894, 2.912444591522217, 1.9948891401290894, 2.912444591522217, 3.8299996852874756, 8.41777515411377, 0.4751356542110443, 0.4751356542110443, 0.4751356542110443, 1.0773311853408813, 1.077331304550171, 1.0773311853408813, 1.0773311853408813, 1.077331304550171, 1.0773311853408813, 1.077331304550171, 1.077331304550171, 1.0773311853408813, 1.077331304550171, 1.077331304550171, 1.0773311853408813, 1.0773311853408813, 1.077331304550171, 1.0773311853408813, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.0773311853408813, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 8.41777515411377, 4.747557163238525, 2.912444591522217, 2.912444591522217, 3.8299996852874756, 1.9948889017105103, 1.9948889017105103, 1.9948891401290894, 1.9948886632919312, 1.9948891401290894, 1.9948889017105103, 1.9948889017105103, 1.9948891401290894, 0.4751356542110443, 0.4751356542110443, 0.4751356542110443, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.9948891401290894, 2.912444591522217, 1.9948891401290894, 2.912444591522217, 3.8299996852874756, 8.41777515411377, 0.4751356542110443, 0.4751356542110443, 0.4751356542110443, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 8.41777515411377, 4.747557163238525, 3.8299996852874756, 1.9948886632919312, 2.912444591522217, 1.9948889017105103, 1.9948889017105103, 1.9948889017105103, 1.9948889017105103, 1.9948891401290894, 1.9948891401290894, 2.912444591522217, 1.9948891401290894, 1.3926714658737183, 0.4751356542110443, 0.4751356542110443, 0.4751356542110443, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.9948891401290894, 2.912444591522217, 1.9948891401290894, 2.912444591522217, 3.8299996852874756, 8.41777515411377, 0.4751356542110443, 0.4751356542110443, 0.4751356542110443, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.9948891401290894, 2.912444591522217, 1.9948891401290894, 2.912444591522217, 3.8299996852874756, 8.41777515411377, 0.4751356542110443, 0.4751356542110443, 0.4751356542110443, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.0773311853408813, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.077331304550171, 1.9948891401290894, 2.912444591522217, 1.9948891401290894, 2.912444591522217, 3.8299996852874756, 8.41777515411377], \"loglift\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.04839999973773956, 0.04309999942779541, 0.04010000079870224, 0.03530000150203705, 0.03530000150203705, 0.02590000070631504, 0.02590000070631504, 0.02590000070631504, 0.02590000070631504, 0.02590000070631504, 0.02590000070631504, 0.02590000070631504, 0.02590000070631504, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 9.999999747378752e-05, 2.960700035095215, 2.960700035095215, 2.960700035095215, 1.8853000402450562, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.16060000658035278, -0.7767000198364258, -1.1550999879837036, -0.7767000198364258, -1.1550999879837036, -1.4289000034332275, -2.216399908065796, 1.121899962425232, 1.121899962425232, 1.121899962425232, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, -0.31279999017715454, -0.6912000179290771, -0.31279999017715454, -0.6912000179290771, -0.9650999903678894, -1.7525999546051025, 1.121899962425232, 1.121899962425232, 1.121899962425232, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, -1.7525999546051025, -1.179900050163269, -0.6912000179290771, -0.6912000179290771, -0.9650999903678894, -0.31279999017715454, -0.31279999017715454, -0.31279999017715454, -0.31279999017715454, -0.31279999017715454, -0.31279999017715454, -0.31279999017715454, -0.31279999017715454, 1.121899962425232, 1.121899962425232, 1.121899962425232, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, -0.31279999017715454, -0.6912000179290771, -0.31279999017715454, -0.6912000179290771, -0.9650999903678894, -1.7525999546051025, 1.121899962425232, 1.121899962425232, 1.121899962425232, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, -1.7525999546051025, -1.179900050163269, -0.9650999903678894, -0.31279999017715454, -0.6912000179290771, -0.31279999017715454, -0.31279999017715454, -0.31279999017715454, -0.31279999017715454, -0.31279999017715454, -0.31279999017715454, -0.6912000179290771, -0.31279999017715454, 0.04650000110268593, 1.121899962425232, 1.121899962425232, 1.121899962425232, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, -0.31279999017715454, -0.6912000179290771, -0.31279999017715454, -0.6912000179290771, -0.9650999903678894, -1.7525999546051025, 1.121899962425232, 1.121899962425232, 1.121899962425232, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, -0.31279999017715454, -0.6912000179290771, -0.31279999017715454, -0.6912000179290771, -0.9650999903678894, -1.7525999546051025, 1.121899962425232, 1.121899962425232, 1.121899962425232, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, 0.30329999327659607, -0.31279999017715454, -0.6912000179290771, -0.31279999017715454, -0.6912000179290771, -0.9650999903678894, -1.7525999546051025], \"logprob\": [30.0, 29.0, 28.0, 27.0, 26.0, 25.0, 24.0, 23.0, 22.0, 21.0, 20.0, 19.0, 18.0, 17.0, 16.0, 15.0, 14.0, 13.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, -2.3099000453948975, -2.8879001140594482, -3.1057000160217285, -3.384399890899658, -3.384399890899658, -3.772200107574463, -3.772200107574463, -3.772200107574463, -3.772200107574463, -3.772200107574463, -3.772200107574463, -3.772200107574463, -3.772200107574463, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -4.414000034332275, -2.2720999717712402, -2.2720999717712402, -2.2720999717712402, -2.2720999717712402, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.574699878692627, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110799789428711, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934, -4.110899925231934]}, \"token.table\": {\"Topic\": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], \"Freq\": [1.0025620460510254, 0.9282195568084717, 0.9282195568084717, 0.9282195568084717, 0.9503698945045471, 1.0443865060806274, 0.9282195568084717, 0.9282195568084717, 1.0300625562667847, 0.9282195568084717, 1.0025619268417358, 0.9282195568084717, 0.9282195568084717, 0.9282196760177612, 0.9282196760177612, 0.9282195568084717, 0.9282196760177612, 1.0300625562667847, 0.9282195568084717, 0.9282195568084717, 0.9282196760177612, 0.9282195568084717, 0.9282195568084717, 0.9282195568084717, 1.0025619268417358, 0.9282195568084717, 0.9282195568084717, 0.9282195568084717, 0.9282195568084717, 0.9282195568084717, 0.9282195568084717, 0.9282196760177612, 0.9282195568084717, 0.7180444598197937, 0.9282195568084717, 0.9282195568084717, 0.9282195568084717, 0.9282195568084717, 0.9282196760177612, 0.9282195568084717, 0.9282196760177612, 0.9282195568084717, 0.9282195568084717, 0.9282195568084717, 0.9282196760177612, 0.9282196760177612, 1.002562165260315, 0.9282195568084717, 0.9282195568084717, 1.0025620460510254, 1.0025620460510254, 1.0025620460510254, 0.9282195568084717, 0.9282195568084717, 1.0531731843948364, 0.9282195568084717, 0.9282195568084717, 1.0025619268417358], \"Term\": [\"18v\", \"allow\", \"argue\", \"bag\", \"battery\", \"blade\", \"brake\", \"brand\", \"buy\", \"cell\", \"circular\", \"configuration\", \"consideration\", \"core\", \"count\", \"couple\", \"crudest\", \"cut\", \"deal\", \"etcetera\", \"get\", \"ignore\", \"imagine\", \"inch\", \"include\", \"know\", \"lean\", \"line\", \"look\", \"love\", \"middle\", \"mind\", \"move\", \"need\", \"number\", \"one\", \"operate\", \"order\", \"ordered\", \"pace\", \"pack\", \"package\", \"plywood\", \"rebate\", \"review\", \"save\", \"saw\", \"see\", \"seize\", \"slimline\", \"take\", \"think\", \"thought\", \"throw\", \"tool\", \"want\", \"way\", \"work\"]}, \"R\": 30, \"lambda.step\": 0.01, \"plot.opts\": {\"xlab\": \"PC1\", \"ylab\": \"PC2\"}, \"topic.order\": [6, 3, 9, 8, 7, 5, 4, 2, 1]};\n",
       "\n",
       "function LDAvis_load_lib(url, callback){\n",
       "  var s = document.createElement('script');\n",
       "  s.src = url;\n",
       "  s.async = true;\n",
       "  s.onreadystatechange = s.onload = callback;\n",
       "  s.onerror = function(){console.warn(\"failed to load library \" + url);};\n",
       "  document.getElementsByTagName(\"head\")[0].appendChild(s);\n",
       "}\n",
       "\n",
       "if(typeof(LDAvis) !== \"undefined\"){\n",
       "   // already loaded: just create the visualization\n",
       "   !function(LDAvis){\n",
       "       new LDAvis(\"#\" + \"ldavis_el1609629083473007443210910021\", ldavis_el1609629083473007443210910021_data);\n",
       "   }(LDAvis);\n",
       "}else if(typeof define === \"function\" && define.amd){\n",
       "   // require.js is available: use it to load d3/LDAvis\n",
       "   require.config({paths: {d3: \"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min\"}});\n",
       "   require([\"d3\"], function(d3){\n",
       "      window.d3 = d3;\n",
       "      LDAvis_load_lib(\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js\", function(){\n",
       "        new LDAvis(\"#\" + \"ldavis_el1609629083473007443210910021\", ldavis_el1609629083473007443210910021_data);\n",
       "      });\n",
       "    });\n",
       "}else{\n",
       "    // require.js not available: dynamically load d3 & LDAvis\n",
       "    LDAvis_load_lib(\"https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js\", function(){\n",
       "         LDAvis_load_lib(\"https://cdn.rawgit.com/bmabey/pyLDAvis/files/ldavis.v1.0.0.js\", function(){\n",
       "                 new LDAvis(\"#\" + \"ldavis_el1609629083473007443210910021\", ldavis_el1609629083473007443210910021_data);\n",
       "            })\n",
       "         });\n",
       "}\n",
       "</script>"
      ],
      "text/plain": [
       "PreparedData(topic_coordinates=              x    y  topics  cluster       Freq\n",
       "topic                                           \n",
       "5     -0.076279 -0.0       1        1  94.618340\n",
       "2      0.096630 -0.0       2        1   3.818781\n",
       "8     -0.002907  0.0       3        1   0.223269\n",
       "7     -0.002907 -0.0       4        1   0.223269\n",
       "6     -0.002907  0.0       5        1   0.223269\n",
       "4     -0.002907 -0.0       6        1   0.223269\n",
       "3     -0.002907  0.0       7        1   0.223269\n",
       "1     -0.002907  0.0       8        1   0.223269\n",
       "0     -0.002907  0.0       9        1   0.223269, topic_info=   Category      Freq           Term     Total  loglift  logprob\n",
       "4   Default  8.000000        battery  8.000000  30.0000  30.0000\n",
       "54  Default  4.000000           tool  4.000000  29.0000  29.0000\n",
       "5   Default  3.000000          blade  3.000000  28.0000  28.0000\n",
       "17  Default  2.000000            cut  2.000000  27.0000  27.0000\n",
       "8   Default  2.000000            buy  2.000000  26.0000  26.0000\n",
       "51  Default  1.000000          think  1.000000  25.0000  25.0000\n",
       "50  Default  1.000000           take  1.000000  24.0000  24.0000\n",
       "57  Default  1.000000           work  1.000000  23.0000  23.0000\n",
       "24  Default  1.000000        include  1.000000  22.0000  22.0000\n",
       "49  Default  1.000000       slimline  1.000000  21.0000  21.0000\n",
       "46  Default  1.000000            saw  1.000000  20.0000  20.0000\n",
       "0   Default  1.000000            18v  1.000000  19.0000  19.0000\n",
       "10  Default  1.000000       circular  1.000000  18.0000  18.0000\n",
       "33  Default  1.000000           need  1.000000  17.0000  17.0000\n",
       "12  Default  1.000000  consideration  1.000000  16.0000  16.0000\n",
       "41  Default  1.000000        package  1.000000  15.0000  15.0000\n",
       "52  Default  1.000000        thought  1.000000  14.0000  14.0000\n",
       "15  Default  1.000000         couple  1.000000  13.0000  13.0000\n",
       "7   Default  1.000000          brand  1.000000  12.0000  12.0000\n",
       "48  Default  1.000000          seize  1.000000  11.0000  11.0000\n",
       "19  Default  1.000000       etcetera  1.000000  10.0000  10.0000\n",
       "55  Default  1.000000           want  1.000000   9.0000   9.0000\n",
       "39  Default  1.000000           pace  1.000000   8.0000   8.0000\n",
       "25  Default  1.000000           know  1.000000   7.0000   7.0000\n",
       "36  Default  1.000000        operate  1.000000   6.0000   6.0000\n",
       "43  Default  1.000000         rebate  1.000000   5.0000   5.0000\n",
       "56  Default  1.000000            way  1.000000   4.0000   4.0000\n",
       "30  Default  1.000000         middle  1.000000   3.0000   3.0000\n",
       "18  Default  1.000000           deal  1.000000   2.0000   2.0000\n",
       "3   Default  1.000000            bag  1.000000   1.0000   1.0000\n",
       "..      ...       ...            ...       ...      ...      ...\n",
       "44   Topic9  0.003258         review  1.077331   0.3033  -4.1109\n",
       "40   Topic9  0.003258           pack  1.077331   0.3033  -4.1109\n",
       "28   Topic9  0.003258           look  1.077331   0.3033  -4.1109\n",
       "27   Topic9  0.003258           line  1.077331   0.3033  -4.1109\n",
       "26   Topic9  0.003258           lean  1.077331   0.3033  -4.1109\n",
       "25   Topic9  0.003258           know  1.077331   0.3033  -4.1109\n",
       "23   Topic9  0.003258           inch  1.077331   0.3033  -4.1109\n",
       "22   Topic9  0.003258        imagine  1.077331   0.3033  -4.1109\n",
       "21   Topic9  0.003258         ignore  1.077331   0.3033  -4.1109\n",
       "1    Topic9  0.003258          allow  1.077331   0.3033  -4.1109\n",
       "19   Topic9  0.003258       etcetera  1.077331   0.3033  -4.1109\n",
       "2    Topic9  0.003258          argue  1.077331   0.3033  -4.1109\n",
       "29   Topic9  0.003258           love  1.077331   0.3033  -4.1109\n",
       "15   Topic9  0.003258         couple  1.077331   0.3033  -4.1109\n",
       "12   Topic9  0.003258  consideration  1.077331   0.3033  -4.1109\n",
       "11   Topic9  0.003258  configuration  1.077331   0.3033  -4.1109\n",
       "9    Topic9  0.003258           cell  1.077331   0.3033  -4.1109\n",
       "7    Topic9  0.003258          brand  1.077331   0.3033  -4.1109\n",
       "6    Topic9  0.003258          brake  1.077331   0.3033  -4.1109\n",
       "3    Topic9  0.003258            bag  1.077331   0.3033  -4.1109\n",
       "18   Topic9  0.003258           deal  1.077331   0.3033  -4.1109\n",
       "32   Topic9  0.003258           move  1.077331   0.3033  -4.1109\n",
       "30   Topic9  0.003258         middle  1.077331   0.3033  -4.1109\n",
       "47   Topic9  0.003258            see  1.077331   0.3033  -4.1109\n",
       "24   Topic9  0.003258        include  1.994889  -0.3128  -4.1109\n",
       "17   Topic9  0.003258            cut  2.912445  -0.6912  -4.1109\n",
       "10   Topic9  0.003258       circular  1.994889  -0.3128  -4.1109\n",
       "8    Topic9  0.003258            buy  2.912445  -0.6912  -4.1109\n",
       "5    Topic9  0.003258          blade  3.830000  -0.9651  -4.1109\n",
       "4    Topic9  0.003258        battery  8.417775  -1.7526  -4.1109\n",
       "\n",
       "[410 rows x 6 columns], token_table=      Topic      Freq           Term\n",
       "term                                \n",
       "0         1  1.002562            18v\n",
       "1         1  0.928220          allow\n",
       "2         1  0.928220          argue\n",
       "3         1  0.928220            bag\n",
       "4         1  0.950370        battery\n",
       "5         1  1.044387          blade\n",
       "6         1  0.928220          brake\n",
       "7         1  0.928220          brand\n",
       "8         1  1.030063            buy\n",
       "9         1  0.928220           cell\n",
       "10        1  1.002562       circular\n",
       "11        1  0.928220  configuration\n",
       "12        1  0.928220  consideration\n",
       "13        1  0.928220           core\n",
       "14        1  0.928220          count\n",
       "15        1  0.928220         couple\n",
       "16        1  0.928220        crudest\n",
       "17        1  1.030063            cut\n",
       "18        1  0.928220           deal\n",
       "19        1  0.928220       etcetera\n",
       "20        1  0.928220            get\n",
       "21        1  0.928220         ignore\n",
       "22        1  0.928220        imagine\n",
       "23        1  0.928220           inch\n",
       "24        1  1.002562        include\n",
       "25        1  0.928220           know\n",
       "26        1  0.928220           lean\n",
       "27        1  0.928220           line\n",
       "28        1  0.928220           look\n",
       "29        1  0.928220           love\n",
       "30        1  0.928220         middle\n",
       "31        1  0.928220           mind\n",
       "32        1  0.928220           move\n",
       "33        1  0.718044           need\n",
       "34        1  0.928220         number\n",
       "35        1  0.928220            one\n",
       "36        1  0.928220        operate\n",
       "37        1  0.928220          order\n",
       "38        1  0.928220        ordered\n",
       "39        1  0.928220           pace\n",
       "40        1  0.928220           pack\n",
       "41        1  0.928220        package\n",
       "42        1  0.928220        plywood\n",
       "43        1  0.928220         rebate\n",
       "44        1  0.928220         review\n",
       "45        1  0.928220           save\n",
       "46        1  1.002562            saw\n",
       "47        1  0.928220            see\n",
       "48        1  0.928220          seize\n",
       "49        1  1.002562       slimline\n",
       "50        1  1.002562           take\n",
       "51        1  1.002562          think\n",
       "52        1  0.928220        thought\n",
       "53        1  0.928220          throw\n",
       "54        1  1.053173           tool\n",
       "55        1  0.928220           want\n",
       "56        1  0.928220            way\n",
       "57        1  1.002562           work, R=30, lambda_step=0.01, plot_opts={'xlab': 'PC1', 'ylab': 'PC2'}, topic_order=[6, 3, 9, 8, 7, 5, 4, 2, 1])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Visualize the topics\n",
    "pyLDAvis.enable_notebook()\n",
    "vis = pyLDAvis.gensim.prepare(lda_model, doc_term_matrix, dictionary)\n",
    "vis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import modules\n",
    "import os.path\n",
    "from gensim import corpora\n",
    "from gensim.models import LsiModel\n",
    "from nltk.tokenize import RegexpTokenizer\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "from gensim.models.coherencemodel import CoherenceModel\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# functions\n",
    "def prepare_corpus(doc_clean):\n",
    "    \"\"\"\n",
    "    Input  : clean document\n",
    "    Purpose: create term dictionary of our courpus and Converting list of documents (corpus) into Document Term Matrix\n",
    "    Output : term dictionary and Document Term Matrix\n",
    "    \"\"\"\n",
    "    # Creating the term dictionary of our courpus, where every unique term is assigned an index. dictionary = corpora.Dictionary(doc_clean)\n",
    "    dictionary = corpora.Dictionary(doc_clean)\n",
    "    # Converting list of documents (corpus) into Document Term Matrix using dictionary prepared above.\n",
    "    doc_term_matrix = [dictionary.doc2bow(doc) for doc in doc_clean]\n",
    "    # generate LDA model\n",
    "    return dictionary,doc_term_matrix\n",
    "\n",
    "# function for creating lsa model\n",
    "def create_gensim_lsa_model(doc_clean,number_of_topics,words):\n",
    "    \"\"\"\n",
    "    Input  : clean document, number of topics and number of words associated with each topic\n",
    "    Purpose: create LSA model using gensim\n",
    "    Output : return LSA model\n",
    "    \"\"\"\n",
    "    dictionary,doc_term_matrix=prepare_corpus(doc_clean)\n",
    "    # generate LSA model\n",
    "    lsamodel = LsiModel(doc_term_matrix, num_topics=number_of_topics, id2word = dictionary)  # train model\n",
    "    print(lsamodel.print_topics(num_topics=number_of_topics, num_words=words))\n",
    "    return lsamodel\n",
    "\n",
    "# function for computing coherence values\n",
    "def compute_coherence_values(dictionary, doc_term_matrix, doc_clean, stop, start=2, step=3):\n",
    "    \"\"\"\n",
    "    Input   : dictionary : Gensim dictionary\n",
    "              corpus : Gensim corpus\n",
    "              texts : List of input texts\n",
    "              stop : Max num of topics\n",
    "    purpose : Compute c_v coherence for various number of topics\n",
    "    Output  : model_list : List of LSA topic models\n",
    "              coherence_values : Coherence values corresponding to the LDA model with respective number of topics\n",
    "    \"\"\"\n",
    "    coherence_values = []\n",
    "    model_list = []\n",
    "    for num_topics in range(start, stop, step):\n",
    "        # generate LSA model\n",
    "        model = LsiModel(doc_term_matrix, num_topics=num_topics, id2word = dictionary)  # train model\n",
    "        model_list.append(model)\n",
    "        coherencemodel = CoherenceModel(model=model, texts=doc_clean, dictionary=dictionary, coherence='c_v')\n",
    "        coherence_values.append(coherencemodel.get_coherence())\n",
    "    return model_list, coherence_values\n",
    "\n",
    "# function for ploting coherence value\n",
    "def plot_graph(doc_clean,start, stop, step):\n",
    "    dictionary,doc_term_matrix=prepare_corpus(doc_clean)\n",
    "    model_list, coherence_values = compute_coherence_values(dictionary, doc_term_matrix,doc_clean,\n",
    "                                                            stop, start, step)\n",
    "    # Show graph\n",
    "    x = range(start, stop, step)\n",
    "    plt.plot(x, coherence_values)\n",
    "    plt.xlabel(\"Number of Topics\")\n",
    "    plt.ylabel(\"Coherence score\")\n",
    "    plt.legend((\"coherence_values\"), loc='best')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the coherence plot \n",
    "start,stop,step=2,12,1\n",
    "plot_graph(reviews_2,start,stop,step)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(0, '0.611*\"battery\" + 0.339*\"tool\" + 0.272*\"blade\" + 0.204*\"buy\" + 0.204*\"cut\" + 0.136*\"18v\" + 0.136*\"circular\" + 0.136*\"include\" + 0.136*\"saw\" + 0.136*\"think\"'), (1, '-0.500*\"product\" + -0.500*\"improvement\" + -0.500*\"handle\" + -0.498*\"need\" + 0.021*\"battery\" + 0.012*\"tool\" + 0.009*\"blade\" + 0.007*\"cut\" + 0.007*\"buy\" + 0.005*\"include\"')]\n"
     ]
    }
   ],
   "source": [
    "# train the model \n",
    "number_of_topics=3\n",
    "words=10\n",
    "clean_text = reviews_2\n",
    "model=create_gensim_lsa_model(clean_text,number_of_topics,words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0,\n",
       "  '0.611*\"battery\" + 0.339*\"tool\" + 0.272*\"blade\" + 0.204*\"buy\" + 0.204*\"cut\" + 0.136*\"18v\" + 0.136*\"circular\" + 0.136*\"include\" + 0.136*\"saw\" + 0.136*\"think\"'),\n",
       " (1,\n",
       "  '-0.500*\"product\" + -0.500*\"improvement\" + -0.500*\"handle\" + -0.498*\"need\" + 0.021*\"battery\" + 0.012*\"tool\" + 0.009*\"blade\" + 0.007*\"cut\" + 0.007*\"buy\" + 0.005*\"include\"')]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# print topics \n",
    "model.print_topics()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
